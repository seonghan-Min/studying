package com.test;

public class Ch07Abstract {
	// 1. 상속
	// Class SubClass extends SuperClass{}
	// 필요성 - 클래스 사이의 멤버 중복 선언 불필요
	// 필드와 메소드 재사용으로 클래스 간결화 가능.
		// 상속하면 접근지정자는 서로 같은 패키지에 있다면 private를 제외한 모두를 사용가능.
		// 서로 다른 패키지에 있다면 자손일 경우 protected 사용가능.
		// default는 같은 폴더에서만 사용 가능.
	// 자손의 객체(변수, 메서드)는 부모와 같거나 더 많다. 벤다이어그램으로 따지면 자손이 부모를 감싸는 형태.
	// 자손끼리 상속은 할 수 없다.
	
	
	
	// 2. 생성자 (this, super)
		// this = 현재 클래스의 인스턴스.
		// 실행상태에 있는 인스턴스의 특정 필드를 지정할 때 사용.
		// new 는 생성자를 통해서만 주소를 할당받고 구동된다.
		// this 는 반드시 맨 앞에 와야한다. 따라서 무조건 한 번만 쓰인다.
			public class A{
				public A() {
					this(4);
					new A(4);
				}
				public A(int a) {
					System.out.println("hello");
				}
			}
		
		// super = 자식 클래스에서 상속받은 부모 클래스의 멤버변수를 참조할 대 사용.
		// 모든걸 다 줘서 생성자는 절대 주지 않는다. 하지만 부모의 생성자가 필요한 경우가 있다.
		// 그럴 때 사용하는 것이 super이다.
		// super.생성자명 을 사용하여 참조할 수 있다.
		// super(); 키워드는 상속이 선언된 순간부터 무조건 자손의 생성자 안에 숨은채로 존재한다.
		// 따라서 new 연산자를 사용해 생성자를 출력했을 때 
			
			
			
	// 3. 접근제어자
			
			
			
		
	// 추상클래스 
	// abstract 리턴타입 메서드명();
	// 구체적이지 않은 클래스.
		// 독수리, 타조 ... = 구체적
		// 포유류, 조류 ... = 추상적
	// 내용이 없음. 선언부만 존재하고 구현부가 없음.
	// 본체가 있으면 Abstract 키워드를 가질 수 없음.
	// 인스턴스 변수 가질 수 없음. 하지만 생성자는 가질 수 있음.
	// 자손 메서드에서 상속을 통해 불러오는 방법으로 사용 가능.
	
	
	
	// 다형성
	// 조상 클래스의 참조변수를 상속받아 자손 클래스에서 사용하는 것.
	// 조상클래스 변수명 = new 자손클래스
	// 예제
		// 메이플을 즐겨하는 영희. 어느날 배틀그라운드 하고싶은데 PC 사양이 낮음.
		// 큰 마음 먹고 PC를 구매하여 메이플과 배틀그라운드를 모두 즐겼음.
		// 여기서 조상 클래스 = 메이플 PC, 자손 클래스 = 배그 PC
	// 자손의 참조변수로는 조상타입의 인스턴스를 참조할 수 없다.
	
	
	
	// 참조변수의 형변환
		// Animal 타입의 P 메서드
		// Human 타입의 C 메서드
		// Animal을 Human으로 상속
		// Animal P = new Human();
	// Instanceof 연산자 : 서로 다른 클래스가 상속이 가능한지 여부를 알려줌.
	
	
	
	// 다형성
	// Object 클래스
		// 모든 클래스의 최고 조상.
		// 사용자 정의 클래스는 언제나 Object 클래스에게 상속을 받는다.
	 	// 상속을 받을 경우 '부모클래스.자손클래스' 로 사용하는 것이 맞으나
		// Object 클래스는 모두의 조상이므로 생략된다.
	// 조상의 참조 변수로 자손클래스의 인스턴스를 참조할 수 있는 것.
	// 다만 반대인 자손클래스의 참조변수로 조상의 인스턴스를 참조할 순 없다.
	// 부모는 여러 자손을 가질 수 있지만, 자손은 단 하나의 부모만 가질 수 있다.
	// 다형성을 쓰는 이유 = 매개변수를 다양하게 사용하기 위해.
		// up-casting 	  : 형변환이 필요 없음
		// down - casting : 형변환 반드시 필요.




	}

}
