# 수치형 x1=1
# 문자형 x2="Character"
# 논리형 x3=FALSE
# 복소수 x4=3-2i


# [데이터 유형]
# mode() - 변수 유형 확인
# is.변수유형 - 해당 변수가 내가 원하는 변수 유형이 맞는지 확인
mode(x1) #nemeric
mode(x2) #character
mode(x3) #logical
mode(x4) #complex
is.character(x1) #FALSE
is.character(x2) #TURE


# [벡터]
# c(), seq(), sequence(), rep()
# 벡터 안에 값은 여러개 넣을 수 있지만, 대표값은 하나밖에 못가진다.
# 대표값은 우선순위에 따라 결정된다.
# 대표값 순서 : 문자형 -> 복소수형 -> 수치형 -> 논리형
x5=c(1, "love", TRUE, 2+3i)
x6=c(10,20,30)
x7=c(70,80,90)
x8=c(x6,x7)     #x6,x7 두 벡터를 합한 벡터 생성.
mode(x5)        #character[1:4]


# [형변환]
# as.유형() - 변환이 성공하지 못하면 NA 로 출력
as.numeric(x1)      #1
as.character(x1)    #"1"


# [콜론(:)]
# 숫자형(Numeric)에만 적용 가능.
# 시작값과 끝값을 적어주면 알아서 카운트하여 벡터 생성.
v1 = 1:5


# [시퀸스(seq(), sequence())]
# 콜론에서 중간값을 정해준 것.
# 시작값과 끝값, 중간값을 적어주면 카운트하여 벡터 생성.
# sequence() 함수는 1부터 1씩 증가하는 정수를 카운트하여 벡터 생성.
v2=seq(from=1, to=10, by=2)
v3=sequence(6)


# [복사(replicate), rep()]
# 값을 복사하여 벡터 생성.
# rep(x, times, each, length.out)
    # x     : 복사를 원하는 값
    # times : 벡터 자체를 지정된 횟수만큼 복사.
    # each  : 벡터 값을 지정된 횟수만큼 복사.
v4=rep(c("a","b"), times=5)
v5=rep(c("a","b"), each=5)
v6=rep(c("a","b"), times=3, each=2)


# [Names() - 벡터의 원소에 이름 부여]
# 이름이 없는 상태로 names 함수를 수행하면 Null 출력
v7= 1:4
names(v7) = c("a", "b", "c", "d")
names(v7)


# [weight[] - 벡터에서일부 원소 추출]
weight = c(57,58,59,60)
weight[1]
weight[c(1,4)]



# 벡터의 길이가 동일한 경우 두 벡터끼리 연산 가능.
# 만약 벡터의 길이가 동일하지 않다면
# 길이가 더 긴 벡터가 상대 벡터를 재사용함.
# 연산은 가능하나 경고가 출력된다.
v10=1:3
v11=4:6
v12=1:5
v10+v11
v1+v3


# [factor(x, levels, labels, ordered) - 요인 생성함수]
    # x: 벡터 지정
    # levles : 그룹화 시킬 벡터를 지정.
    # labels : levels에서 그룹화 시킨 그룹의 이름 지정.
    # ordered   : lebels의 순서. TRUE.
gender = c("M", "F", "F", "M", "F", "F")
gender_factor1 = factor(gender)
gender_factor2 = factor(gender, levels=c("F","M"), labels=c("여자", "남자"))
gneder_factor3 = factor(gender, ordered=TRUE)
gender_factor1
gender_factor2
gneder_factor3


# 행렬 생성 방법
# rbind()   - 가로로 행렬 생성
# cbind()   - 세로로 행렬 생성
# matrix()  - 옵션에 따라 행렬 생성
rbind(v10, v11)
cbind(v10, v11)
m1 = matrix(1:4, nrow=2, ncol=2)
m2 = matrix(1:4, nrow=2, ncol=2, byrow=TRUE)
m1
m2


# [array(x, dim) - 벡터 생성]
array1 = array(1:10, dim=10)
array2 = array(1:10, dim=c(2,5))
array3 = array(1:10, dim=c(3,3,4))
array1
array2
array3


## 리스트 - vector, factor, matrix, array, dataFrame 까지 전부 요소로 가질 수 있는  형태.
list_data1 = 1:5
list_data2 = matrix(1:6, nrow=2, ncol=3)
list = list(list_data1, list_data2)
list
list[1]     # list의 첫 번째 원소(결과타입: 리스트)
list[[1]]   # list의 첫 원소의 내용(결과타입: 벡터)


# [데이터프레임 data.fame()]
id = 1:5
age = c(29,32,47,35,23)
gender=c("F","M","M","F","F")
height=c(163,177,172,152,169)
DF1 = data.frame(id, age, gender, height)
DF2 = data.frame(id, age, gender, height, stringsAsFactors = TRUE)
DF1
DF2
nrow(DF1)       # 행의 개수
ncol(DF1)       # 열의 개수
rownames(DF1)   # 별도의 이름이 없으면 숫자1 부터 순서대로 출력.
rownames(DF1) = paste("R", 1:5, sep="") #sep은 연결할 내용.
colnames(DF1)
dim(DF1)        # 몇행 몇열인지 출력.
dimnames(DF1)   # 행열의 각 이름을 출력.
str(DF1)        # 지정된 데이터의 구조 출력.


# [패키지 다운로드 install.packages()]
install.packages("ggplot2")
install.packages("readxl")
install.packages("openxlsx")
library(ggplot2)
library(openxlsx)
library(readxl)



# [외부 파일 읽어오기 read.table(file="Path/name", fileEncoding="")]
    # 구분자가 공백인 경우
    Category_space=read.table(file="./fdsa.txt", header=TRUE, sep="", fileEncoding="UTF-8")
    
    # 구분자가 콤마인 경우
    Category_comma=read.csv(file="./comma.txt", header=TRUE, sep=",", fileEncoding = "UTF-8")
    
    # CSV 파일 읽는 경우
    Category_csv=read.csv(file="./인구주택총조사2015.CSV", header=TRUE, sep=",")
    
    # excel 파일 읽는 경우
    ebook=read_excel(path="./ebook.xlsx", sheet="data", col_names=TRUE)

    
# 저장하기
    # 일반적인 저장방법
    ebook = save(Category_excel, file="./ebook.Rdata")

    # 텍스트 데이터 저장방법
    write.table(iris, file="./iris.txt", sep=",")
    write.table(ebook, file="./ebook.txt", sep=",", row.names=FALSE)
    write.table(ebook, file="./ebook.xlsx")
    

# 불러오기
eload(file="./ebook.rdata")


# 데이터 보기
View(ebook)
head(ebook, n=10)
tail(ebook, n=10)





# 예제
english = c(90,80,60,70)
math= c(50,60,100,20)
class = c(1,1,2,2)
xTable = cbind(english,math,class)
xTable


# 예제
gender = c("남자","여자","남자")
age = c(26, 42, 35)
grade = c(3.8, 4.2, 2.6)
sal = c("2,700만원", "4,000만원", "3,500만원")
person = data.frame(gender, age, grade, sal)
    mean(age)
    mean(grade)
