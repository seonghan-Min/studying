{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 과제\n",
    "##### 문제1 : calc에 여러번 계산하더라도 문제가 없도록 수정.;\n",
    "##### 문제2 : 위의 함수 호출을 메뉴화. (입력, 계싼, 등급, 석차, 출력, 종료)\n",
    "- while문 사용\n",
    "- 메뉴 입력 input에 yield 사용.\n",
    "- 조건에 따라 분기해서 함수 실행.\n",
    "\n",
    "    석차: 합계가 계산 안된경우, 석차 공간이 없는 경우, 석차 재계산 필요한 경우.\n",
    "    - 처음 : append\n",
    "    - 재계산 : 인덱스 이용한 할당."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "achivement = []\n",
    "def input_score(achivement):\n",
    "    for inputScore in range(3):\n",
    "        person = []\n",
    "        name = input(\"이름 입력\")\n",
    "        kor = int(input(\"국어점수 입력\"))\n",
    "        mat = int(input(\"수학점수 입력\"))\n",
    "        eng = int(input(\"영어점수 입력\"))\n",
    "        person.append(name)\n",
    "        person.append(kor)\n",
    "        person.append(mat)\n",
    "        person.append(eng)\n",
    "        achivement.append(person)\n",
    "        \n",
    "def print_achivement(achivement):\n",
    "    if achivement == []:\n",
    "        print(\"입력먼저 하시오\")\n",
    "    else :\n",
    "        print(\"이름 \\t 국어 \\t수학 \\t영어 \\t총점 \\t평균 \\t석차 \\t등급\")\n",
    "        for achive in achivement:\n",
    "            for score in achive:\n",
    "                print(score, \"\\t\", end=\"\")\n",
    "            print()\n",
    "\n",
    "def calc(achivement):\n",
    "    for achive in achivement:\n",
    "        tot = achive[1]+ achive[2] +achive[3]\n",
    "        avr = round(tot/3, 2)\n",
    "        if len(achive) ==4:\n",
    "            achive.append(tot)\n",
    "            achive.append(avr)\n",
    "        else:\n",
    "            achive[4] = tot\n",
    "            achive[5] = avr\n",
    "            \n",
    "def rank(achivement):\n",
    "    if achivement == []:\n",
    "        print(\"먼저 입력하시오\")\n",
    "    elif len(achivement[0]) <=4:\n",
    "        print(\"총점과 평균을 먼저 계산해야 합니다.\")\n",
    "    else:\n",
    "        if len(achivement[0])==7:\n",
    "            for achive in achivement:\n",
    "                del(achive[6])\n",
    "        achivement.sort(key=lambda row: row[4], reverse=True)\n",
    "        rank=0\n",
    "        for i in range(len(achivement)):\n",
    "            rank = rank+1\n",
    "            achivement[i].append(rank)\n",
    "        achivement.sort(key=lambda row : row[0])\n",
    "        print(achivement)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### grade를 메뉴에 추가\n",
    "- 총점 및 석차 계산 후 append로 저장공간 확보하여 출력."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gradeSelect(tot):\n",
    "    if tot >= 90: grade = \"A\"\n",
    "    elif tot >= 80: grade = \"B\"\n",
    "    elif tot >= 70: grade = \"C\"\n",
    "    elif tot >= 60: grade = \"D\"\n",
    "    else : grade = \"F\"\n",
    "    return grade\n",
    "\n",
    "def insertGrade(achivement):\n",
    "    if achivement == []:\n",
    "        print(\"데이터를 먼저 입력하시오.\")\n",
    "    elif len(achivement[0]) <= 7 or len(achivement[len(achivement)-1]) <= 7:\n",
    "        calc(achivement)\n",
    "        rank(achivement)\n",
    "    elif len(achivement[0]) == 8:\n",
    "        for achive in achivement:\n",
    "            del(achive[8])\n",
    "    for i in range(len(achivement)):\n",
    "        achivement[i].append(gradeSelect(achivement[i][4]))\n",
    "    return achivement\n",
    "\n",
    "def reset(achivement):\n",
    "    for i=0 in range(len(achivement)):\n",
    "        del achivement[i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "menu= [\"입력(1), 출력(2), 계산(3), 석차(4), 등급(5), 초기화(6), 종료(9)\"]\n",
    "while 1:\n",
    "    sel = input(menu)\n",
    "    if sel ==\"1\":\n",
    "        input_score(achivement)\n",
    "        continue\n",
    "    elif sel == \"2\":\n",
    "        print_achivement(achivement)\n",
    "        continue\n",
    "    elif sel == \"3\":\n",
    "        calc(achivement)\n",
    "        continue\n",
    "    elif sel == \"4\":\n",
    "        rank(achivement)\n",
    "        continue\n",
    "    elif sel == \"5\":\n",
    "        insertGrade(achivement)\n",
    "        continue\n",
    "    elif sel == \"6\":\n",
    "        reset(achivement)\n",
    "        continue\n",
    "    elif sel == \"9\":\n",
    "        break\n",
    "    else:\n",
    "        print(\"다시입력\")\n",
    "        continue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 해쉬함수\n",
    "\n",
    "a = \"대한민국\"\n",
    "b = \"아시아의 중심\"\n",
    "print(a)\n",
    "print(b)\n",
    "print(hash(a))\n",
    "print(hash(b))\n",
    "\n",
    "\n",
    "# dictionary\n",
    "d = {'a':10, 'b':20, 'c':30}\n",
    "e = d.get('a')\n",
    "print(d)\n",
    "print(d['a'])\n",
    "print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set\n",
    "- 중복되는 원소 허용 X.\n",
    "- 순서에 상관 X.\n",
    "- 리스트처럼 인덱스 번호를 사용하여 접근 X.\n",
    "- 자료형 뿐만 아니라 다양한 타입을 원소로 포함 가능."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "s1 =set([1,2,3,4,4,3,2,1,1,1,2,4,3])\n",
    "print(s1)\n",
    "print(type(s1))\n",
    "\n",
    "# 합집합 (union())\n",
    "# 교집합 (intersection())\n",
    "# 차집합 (symmetric_difference())\n",
    "# 하위집합 - 논리형(issubset())\n",
    "# 상위집합 - 논리형(issuperset())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# 문제\n",
    "# 각 dic을 결합하는 함수 작성.\n",
    "dic01 = {}\n",
    "dic02 = {}\n",
    "\n",
    "data_dic01_A = int(input(\"A의 Value를 입력하시오 : \"))\n",
    "data_dic01_B = int(input(\"B의 Value를 입력하시오 : \"))\n",
    "data_dic02_C = int(input(\"C의 Value를 입력하시오 : \"))\n",
    "data_dic02_D = int(input(\"D의 Value를 입력하시오 : \"))\n",
    "\n",
    "dic01[\"A\"] = data_dic01_A\n",
    "dic01[\"B\"] = data_dic01_B\n",
    "dic02[\"C\"] = data_dic02_C\n",
    "dic02[\"D\"] = data_dic02_D\n",
    "\n",
    "print(dic01)\n",
    "print(dic02)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Merge(dic01, dic02):\n",
    "    res = {**dic01, **dic02}\n",
    "    return res\n",
    "dic03 = Merge(dic01, dic02)\n",
    "print(dic03)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 문제\n",
    "# 두 DIC의 차를 구해서 출력\n",
    "test_dic1 = {'seoul':6, 'incheon':4, 'chungju':7, 'deajeon':10}\n",
    "test_dic2 = {'seoul':10, 'incheon':6, 'chungju':10}\n",
    "\n",
    "res = {key: test_dic2[key]-test_dic1.get(key, 0) for key in test_dic2.keys()}\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 안녕하세요. 좋은 날씨입니다. 또 안녕하세요.\n",
    "def countchar(word):\n",
    "    counter={}\n",
    "    for char1 in word:\n",
    "        if char1 not in counter:\n",
    "            counter[char1]=0\n",
    "        counter[char1]+=1\n",
    "    return counter\n",
    "countchar(\"안녕하세요 또 안녕하세요\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import Counter\n",
    "Counter(\"우리나라 만세 또 만세\")\n",
    "\n",
    "counter = Counter()\n",
    "counter.update(\"우리나라 만세\")\n",
    "counter.update(\"대한민국 만세\")\n",
    "print(counter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 문제\n",
    "# 다음 dict를 Key 별로 모두 더해보세요.\n",
    "ini_dict = [{'seoul':5, 'incheon':10, 'kyeonggi':90}, \n",
    "            {'seoul':45, 'incheon':78}, \n",
    "            {'seoul':90, 'incheon':10}]\n",
    "\n",
    "counter = Counter()\n",
    "for d in ini_dict:\n",
    "    counter.update(d)\n",
    "print(str(counter))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import collections, functools, operator\n",
    "result = dict(functools.reduce(operator.add, map(Counter, ini_dict)))\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 문제 : 기본급 10,000원 + 시간당 7,500원의 급여를 계산하고자 함.\n",
    "total_time = [160,150,120,180,300,400]\n",
    "pay = list(map(lambda x: x*7500*10000, total_time))\n",
    "print(\"급여 : \", pay)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def odd(p):\n",
    "    return[i for i in p if i%2]\n",
    "odd(range(10))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def odd(p):\n",
    "    return p%2\n",
    "list(filter(odd, range(10)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 다음 데이터 중에서 4보다 큰 수만 필터링하시오.\n",
    "data = [1,2,3,4,5,6,7,8,3,4,2,1]\n",
    "fil = list(filter(lambda x : x>4, data))\n",
    "print(fil)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "strings = ['foo', 'card', 'bar', 'aaaa', 'abab']\n",
    "print(set(list(strings)))\n",
    "strings.sort(key=lambda x: len(set(list(x))))\n",
    "print(strings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from functools import reduce\n",
    "reduce(lambda x,y : x+y, range(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# list - list\n",
    "# list - dict\n",
    "# dict - list\n",
    "# dict - dict\n",
    "\n",
    "# 전체 데이터는 list에, 개인별 데이터는 dict에 입력해서 처리하는 프로그램 작성.\n",
    "scoreList = []\n",
    "def inputScore(scoreList):\n",
    "    for inputScoreStudent in range(2):\n",
    "        student = {}\n",
    "        student['name'] = input(\"이름 입력 : \")\n",
    "        student['kor'] = int(input(\"국어점수 입력 : \"))\n",
    "        student['eng'] = int(input(\"영어점수 입력 : \"))\n",
    "        student['math'] = int(input(\"수학점수 입력 : \"))\n",
    "        \n",
    "        student['tot'] = student['kor'] + student['eng'] + student['math']\n",
    "        student['avg'] = round(student['tot']/3, 2)\n",
    "        \n",
    "        scoreList.append(student)\n",
    "        print(\" \")\n",
    "        \n",
    "def printList(scoreList):\n",
    "    if scoreList == []:\n",
    "        print(\"입력 먼저 진행해주세요.\")\n",
    "    else:\n",
    "        print(\"이름 \\t 국어 \\t수학 \\t영어 \\t총점 \\t평균\")\n",
    "        for student in scoreList:\n",
    "            print(student['name'], \"\\t\",\n",
    "                  student['kor'], \"\\t\",\n",
    "                  student['math'], \"\\t\", \n",
    "                  student['eng'], \"\\t\", \n",
    "                  student['tot'], \"\\t\",\n",
    "                  student['avg'])\n",
    "            \n",
    "inputScore(scoreList)\n",
    "printList(scoreList)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
